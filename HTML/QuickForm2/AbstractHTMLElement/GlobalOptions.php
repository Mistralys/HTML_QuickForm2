<?php

declare(strict_types=1);

namespace HTML\QuickForm2\AbstractHTMLElement;

/**
 * Global options for all elements generated by subclasses of HTML_Common2
 *
 * Preset options are
 * - 'charset': charset parameter used in htmlspecialchars() calls,
 *   defaults to 'ISO-8859-1'
 * - 'indent': string used to indent HTML elements, defaults to "\11"
 * - 'linebreak': string used to indicate linebreak, defaults to "\12"
 *
 * By default, we generate element IDs with numeric indexes appended even for
 * elements with unique names. If you want IDs to be equal to the element
 * names by default, set this configuration option to false.
 */
class GlobalOptions
{
    public const OPTION_CHARSET   = 'charset';
    public const OPTION_INDENT    = 'indent';
    public const OPTION_LINEBREAK = 'linebreak';
    public const OPTION_LOGGING = 'logging';
    public const OPTION_IF_FORCE_APPEND = 'id_force_append_index';
    public const OPTION_LANGUAGE = 'language';
    public const OPTION_NONCE = 'nonce';

    public const LINEBREAK_WIN  = "\15\12";
    public const LINEBREAK_UNIX = "\12";
    public const LINEBREAK_MAC  = "\15";

    /**
     * Global options for all elements generated by subclasses of HTML_Common2
     *
     * Preset options are
     * - 'charset': charset parameter used in htmlspecialchars() calls,
     *   defaults to 'ISO-8859-1'
     * - 'indent': string used to indent HTML elements, defaults to "\11"
     * - 'linebreak': string used to indicate linebreak, defaults to "\12"
     *
     * @var array<string,string>
     */
    private static array $_options = [
        self::OPTION_CHARSET   => 'ISO-8859-1',
        self::OPTION_INDENT    => "\11",
        self::OPTION_LINEBREAK => self::LINEBREAK_UNIX,
        self::OPTION_LOGGING   => 'yes',
        self::OPTION_LANGUAGE => 'en',
        self::OPTION_NONCE => '',
        self::OPTION_IF_FORCE_APPEND => 'yes'
    ];

    /**
     * Mapping "platform name" => "linebreak symbol(s)"
     *
     * @var array<string,string>
     */
    private static $_linebreaks = [
        'win'  => self::LINEBREAK_WIN,
        'unix' => self::LINEBREAK_UNIX,
        'mac'  => self::LINEBREAK_MAC
    ];

    /**
     * Sets global option(s)
     *
     * @param string $nameOrOptions Option name or array ('option name' => 'option value')
     * @param string|NULL        $value         Option value, if first argument is not an array
     */
    public static function setOption(string $nameOrOptions, ?string $value = null) : void
    {
        if ($nameOrOptions === self::OPTION_LINEBREAK)
        {
            if(!isset(self::$_linebreaks[$value]))
            {
                return;
            }

            $value = self::$_linebreaks[$value];
        }

        self::$_options[$nameOrOptions] = $value;
    }

    /**
     * Returns global option(s)
     *
     * @param string $name Option name
     *
     * @return string Option value, null if option does not exist.
     */
    public static function getOption(string $name) : ?string
    {
        return self::$_options[$name] ?? null;
    }

    /**
     * @return array<string,string>
     */
    public static function getOptions() : array
    {
        return self::$_options;
    }

    public static function getCharset() : string
    {
        return self::getOption(self::OPTION_CHARSET);
    }

    public static function getIndentChar() : string
    {
        return self::getOption(self::OPTION_INDENT);
    }

    /**
     * Retrieves the element language.
     *
     * @return string Two-letter language code, e.g. `en`, `de`.
     */
    public static function getLanguage() : string
    {
        return self::getOption(self::OPTION_LANGUAGE);
    }

    /**
     * @param string $languageCode Two-letter language code, e.g. `en`, `de`.
     * @return void
     */
    public static function setLanguage(string $languageCode) : void
    {
        self::setOption(self::OPTION_LANGUAGE, $languageCode);
    }

    public static function setIDAppendEnabled(bool $enabled) : void
    {
        $value = 'no';
        if($enabled === true) {
            $value = 'yes';
        }

        self::setOption(self::OPTION_IF_FORCE_APPEND, $value);
    }

    public static function isIDAppendEnabled() : bool
    {
        return self::getOption(self::OPTION_IF_FORCE_APPEND) === 'yes';
    }

    public static function isLoggingEnabled() : bool
    {
        return self::getOption(self::OPTION_LOGGING) === 'yes';
    }

    public static function getLineBreak() : string
    {
        return self::getOption(self::OPTION_LINEBREAK);
    }

    public static function getNonce() : ?string
    {
        $nonce = self::getOption(self::OPTION_NONCE);

        if(!empty($nonce)) {
            return $nonce;
        }

        return null;
    }

    public static function setNonce(?string $nonce) : void
    {
        self::setOption(self::OPTION_NONCE, (string)$nonce);
    }
}
